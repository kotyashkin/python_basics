"""
Реализовать проект расчета суммарного расхода ткани на производство одежды.
Основная сущность (класс) этого проекта — одежда, которая может иметь определенное название.
К типам одежды в этом проекте относятся пальто и костюм.
У этих типов одежды существуют параметры: размер (для пальто) и рост (для костюма).
Это могут быть обычные числа: V и H, соответственно.
Для определения расхода ткани по каждому типу одежды использовать формулы:
для пальто (V/6.5 + 0.5), для костюма (2 * H + 0.3).
Проверить работу этих методов на реальных данных.
Реализовать общий подсчет расхода ткани.
Проверить на практике полученные на этом уроке знания:
реализовать абстрактные классы для основных классов проекта, проверить на практике
работу декоратора @property.
"""
#from abc import ABC, abstractmethod - не понял как здесь реализовать абстрактный метод
# потому что тогда надо писать "ABC" в скобках при создании основного класса
# а при создании cs = Clothes(52, 1.8) нужно передавать в скобках параметры для вычисления
# без абстрактных методов всё работает
class Clothes():
    def __init__(self, size, height):
        self.size = size
        self.height = height
    #@abstractmethod
    #def my_method_1(self):
    #    pass
    @property
    def get_sq_full(self):
        return f'Площадь общая ткани: {(self.size / 6.5 + 0.5)+(self.height * 2 + 0.3)}'

class Coat(Clothes):
    def __init__(self, size):
        self.x = size / 6.5 + 0.5
        print(f'Ткани для пальто: {self.x}')
    #def my_method1(self):
    #    print('проверка работы абстрактного метода объекта "Пальто"')

class Suit(Clothes):
    def __init__(self, height):
        self.y = height * 2 + 0.3
        print(f'Ткани для костюма: {self.y}')
    #def my_method1(self):
    #    print('проверка работы абстрактного метода объекта "Костюм"')

coat = Coat(52)
suit = Suit(1.8)
cs = Clothes(52, 1.8)
print(cs.get_sq_full)